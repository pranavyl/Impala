====
---- QUERY
##################################################
# Create a new lineitem table with sorted l_orderkey
# with controlled number of rows per page.
###################################################
set PARQUET_PAGE_ROW_COUNT_LIMIT=24000;
drop table if exists lineitem_orderkey_only;
CREATE TABLE lineitem_orderkey_only(l_orderkey bigint)
sort by (l_orderkey)
STORED AS PARQUET;
insert into lineitem_orderkey_only
select l_orderkey from tpch_parquet.lineitem;
====
---- QUERY
###################################################
# Both a.l_orderkey and b.o_orderkey are BIGINT.
###################################################
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
SET MINMAX_FILTERING_LEVEL=PAGE;
SET MINMAX_FILTER_THRESHOLD=0.5;
select straight_join a.l_orderkey from
lineitem_orderkey_only a join [SHUFFLE] tpch_parquet.orders b
where a.l_orderkey = b.o_orderkey
and b.o_custkey = 5 order by l_orderkey;
---- RESULTS
224167
224167
224167
224167
287619
905633
905633
905633
905633
905633
905633
905633
2630562
2630562
2630562
2630562
2630562
2630562
2630562
---- RUNTIME_PROFILE
aggregation(SUM, NumRuntimeFilteredPages)> 200
====
---- QUERY
###################################################
# ss_sold_time_sk is INT.
###################################################
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
SET MINMAX_FILTER_THRESHOLD=0.5;
select straight_join count(*) from
tpcds_parquet.store_sales a join [SHUFFLE] tpcds_parquet.store_sales b
where a.ss_sold_time_sk = b.ss_sold_time_sk and b.ss_customer_sk = 1
---- RESULTS
882
---- RUNTIME_PROFILE
aggregation(SUM, NumRuntimeFilteredRowGroups): 16
====
---- QUERY
###################################################
# a.ss_sold_time_sk is INT and b.ss_item_sk is
# BIGINT. Implicit casting on a is involved.
###################################################
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
SET MINMAX_FILTER_THRESHOLD=0.5;
select straight_join count(*) from
tpcds_parquet.store_sales a join [SHUFFLE] tpcds_parquet.store_sales b
where a.ss_sold_time_sk = b.ss_item_sk and b.ss_addr_sk < 20;
---- RESULTS
0
---- RUNTIME_PROFILE
aggregation(SUM, NumRuntimeFilteredRowGroups): 1824
====
---- QUERY
###################################################
# a.ss_sold_time_sk is BIGINT and b.ss_item_sk is
# INT. Implicit casting on b is involved. Should
# return the same result as the query above.
###################################################
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
SET MINMAX_FILTER_THRESHOLD=0.5;
select straight_join count(*) from
tpcds_parquet.store_sales a join [SHUFFLE] tpcds_parquet.store_sales b
where a.ss_sold_time_sk = b.ss_item_sk and a.ss_addr_sk < 20;
---- RESULTS
0
---- RUNTIME_PROFILE
aggregation(SUM, NumRuntimeFilteredRowGroups): 90
====
---- QUERY
###################################################
# Rerun the above query with overlap filter off.
# Should get the same result with no rowgroup or
# pages filtered out.
###################################################
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
SET MINMAX_FILTER_THRESHOLD=0.0;
select straight_join count(*) from
tpcds_parquet.store_sales a join [SHUFFLE] tpcds_parquet.store_sales b
where a.ss_sold_time_sk = b.ss_item_sk and a.ss_addr_sk < 20;
---- RESULTS
0
---- RUNTIME_PROFILE
aggregation(SUM, NumRuntimeFilteredRowGroups): 0
aggregation(SUM, NumRuntimeFilteredPages): 0
====
---- QUERY
##################################################
# Create the lineitem table with sorted l_shipdate
# which is a STRING.
###################################################
drop table if exists lineitem_sorted_l_shipdate;
CREATE TABLE lineitem_sorted_l_shipdate
sort by (l_shipdate)
STORED AS PARQUET
as select * from tpch_parquet.lineitem;
====
---- QUERY
###################################################
# Join the above sorted column with the order date
# from the orders table. Expect to see a total of
# 120 pages filtered out.
###################################################
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
SET MINMAX_FILTER_THRESHOLD=0.5;
SET MINMAX_FILTERING_LEVEL=PAGE;
select straight_join count(*)
from lineitem_sorted_l_shipdate a join [SHUFFLE]
tpch_parquet.orders b
where a.l_shipdate = b.o_orderdate and b.o_orderkey = 2
---- RESULTS
2530
---- RUNTIME_PROFILE
aggregation(SUM, NumRuntimeFilteredPages): 120
====
---- QUERY
###################################################
# Repeat the above test with the overlap filtering
# on sorted columns disabled. Should return the
# same number of rows. Expect to see 0 pages
# filtered out.
###################################################
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
SET MINMAX_FILTER_SORTED_COLUMNS=false;
select straight_join count(*)
from lineitem_sorted_l_shipdate a join [SHUFFLE]
tpch_parquet.orders b
where a.l_shipdate = b.o_orderdate and b.o_orderkey = 2
---- RESULTS
2530
---- RUNTIME_PROFILE
aggregation(SUM, NumRuntimeFilteredPages): 0
====
---- QUERY
##################################################
# Create the lineitem table with sorted
# l_extendedprice which is DECIMAL(12,2).
###################################################
drop TABLE if exists lineitem_sorted_l_extendedprice;
CREATE TABLE lineitem_sorted_l_extendedprice
sort by (l_extendedprice)
STORED AS PARQUET
as select * from tpch_parquet.lineitem;
====
---- QUERY
###################################################
# Join the above sorted column with itself. Expect
# to see a total of 255 pages filtered out.
###################################################
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
SET MINMAX_FILTER_THRESHOLD=1.0;
SET MINMAX_FILTERING_LEVEL=PAGE;
select straight_join count(*)
from lineitem_sorted_l_extendedprice a join [SHUFFLE]
lineitem_sorted_l_extendedprice b
where a.l_extendedprice = b.l_extendedprice and b.l_orderkey = 1;
---- RESULTS
36
---- RUNTIME_PROFILE
aggregation(SUM, NumRuntimeFilteredPages): 255
====
---- QUERY
###################################################
# Test that explicitly skipping minmax runtime filter does not crash backend.
# Expect to see a total of 0 pages filtered out.
###################################################
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
SET MINMAX_FILTER_THRESHOLD=1.0;
SET MINMAX_FILTERING_LEVEL=PAGE;
SET RUNTIME_FILTER_IDS_TO_SKIP=1;
select straight_join count(*)
from lineitem_sorted_l_extendedprice a join [SHUFFLE]
lineitem_sorted_l_extendedprice b
where a.l_extendedprice = b.l_extendedprice and b.l_orderkey = 1;
---- RESULTS
36
---- RUNTIME_PROFILE
aggregation(SUM, NumRuntimeFilteredPages): 0
====
---- QUERY
###################################################
# Join the above sorted column with itself with
# overlap filtering on sorted columns disabled.
# Expect to see the same result with 0 pages
# filtered out.
###################################################
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
SET MINMAX_FILTER_SORTED_COLUMNS=false;
select straight_join count(*)
from lineitem_sorted_l_extendedprice a join [SHUFFLE]
lineitem_sorted_l_extendedprice b
where a.l_extendedprice = b.l_extendedprice and b.l_orderkey = 1;
---- RESULTS
36
---- RUNTIME_PROFILE
aggregation(SUM, NumRuntimeFilteredPages): 0
====
---- QUERY
###################################################
# Create store_sales table in unique_database.
###################################################
drop table if exists store_sales;
CREATE TABLE store_sales
partitioned by (ss_sold_date_sk)
STORED AS PARQUET
as select * from tpcds_parquet.store_sales;
set compute_column_minmax_stats = true;
compute stats store_sales(ss_addr_sk);
====
---- QUERY
###################################################
# Check out the number row groups with filters
# rejected by column stats with a partitioned join.
###################################################
set minmax_filter_threshold=0.5;
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
select count(a.ss_sold_time_sk) from
store_sales a join [SHUFFLE] store_sales b
on a.ss_addr_sk = b.ss_addr_sk where
b.ss_customer_sk < 10;
---- RESULTS
12728
---- RUNTIME_PROFILE
aggregation(SUM, NumRowGroupsSkippedByUnusefulFilters)> 1700
====
---- QUERY
###################################################
# Check out the number row groups with filters
# rejected by column stats with a broadcast join.
###################################################
set minmax_filter_threshold=0.5;
SET RUNTIME_FILTER_WAIT_TIME_MS=$RUNTIME_FILTER_WAIT_TIME_MS;
select count(a.ss_sold_time_sk) from
store_sales a join store_sales b
on a.ss_addr_sk = b.ss_addr_sk where
b.ss_customer_sk < 10;
---- RESULTS
12728
---- RUNTIME_PROFILE
aggregation(SUM, NumRowGroupsSkippedByUnusefulFilters)> 1700
====
---- QUERY
###################################################
# clear the stats on store_sales.
###################################################
drop stats store_sales;
====
---- QUERY
###################################################
# The number of row groups with filters rejected by
# column stats should drop down to 0.
###################################################
set minmax_filter_threshold=0.5;
select count(a.ss_sold_time_sk) from
store_sales a join [SHUFFLE] store_sales b
on a.ss_addr_sk = b.ss_addr_sk where
b.ss_customer_sk < 10;
---- RESULTS
12728
---- RUNTIME_PROFILE
aggregation(SUM, NumRowGroupsSkippedByUnusefulFilters): 0
====
---- QUERY
###################################################
# Compute column stats for the following tests on
# Final filter table in profile.
###################################################
set compute_column_minmax_stats=true;
compute stats lineitem_orderkey_only;
====
---- QUERY
# Run an equi hash join query in which the population of the hash table quickly
# renders the corresponding min/max filter not useful, whose min/max value will be
# represented by AlwaysTrue in the abbreviated Final filter table shown below.
# Looking for filter id=1, pending=0, enabled=false, MIN_MAX, Min/max=AlwaysTrue.
#
# ID   Pending (Expected)  Enabled  Bloom Size  Est fpp   Min value    Max value
# ------------------------------------------------------------------------------
# 0    0 (3)                 true     1.00 MB    0.112
# 1    0 (3)                 false     MIN_MAX           AlwaysTrue   AlwaysTrue
set minmax_filter_threshold=0.5;
select straight_join count(*) from
lineitem_orderkey_only a join [SHUFFLE] tpch_parquet.orders b
where a.l_orderkey = b.o_orderkey;
---- RESULTS
6001215
---- RUNTIME_PROFILE
row_regex: .*1.+0 \(\d+\).+false.+MIN_MAX\s+AlwaysTrue\s+AlwaysTrue.*
====
---- QUERY
# Run an equi hash join query in which the population of the hash table produces
# a useful min/max filter. The min and max of the final filter is shown in the
# abbreviated Final filter table below.
# Looking for filter id=1, pending=0, enabled=true, MIN_MAX, Min=224167,
# max=2630562.
#
# ID   Pending (Expected)  Enabled  Bloom Size  Est fpp   Min value    Max value
# ------------------------------------------------------------------------------
# 0    0 (3)                 true     1.00 MB    0.112
# 1    0 (3)                 true     MIN_MAX                224167      2630562
set minmax_filter_threshold=0.5;
select straight_join count(*) from
lineitem_orderkey_only a join [SHUFFLE] tpch_parquet.orders b
where a.l_orderkey = b.o_orderkey and b.o_custkey = 5;
---- RESULTS
19
---- RUNTIME_PROFILE
row_regex: .*1.+0 \(\d+\).+true.+MIN_MAX\s+224167\s+2630562.*
====
---- QUERY
# Run an equi hash join query in which the population of the hash table produces
# an empty min/max filter. The min and max of the final filter is always false.
# Looking for filter id=1, pending=0, enabled=true, MIN_MAX, Min/max=AlwaysFalse.
#
# ID   Pending (Expected)  Enabled  Bloom Size  Est fpp   Min value    Max value
# ------------------------------------------------------------------------------
# 0    0 (3)                 true     1.00 MB    0.112
# 1    0 (3)                 true     MIN_MAX           AlwaysFalse  AlwaysFalse
set minmax_filter_threshold=0.5;
select straight_join count(*) from
lineitem_orderkey_only a join [SHUFFLE] tpch_parquet.orders b
where a.l_orderkey = b.o_orderkey and b.o_custkey = -5;
---- RESULTS
0
---- RUNTIME_PROFILE
row_regex: .*1.+0 \(\d+\).+true.+MIN_MAX\s+AlwaysFalse\s+AlwaysFalse.*
====
---- QUERY
# Positive tests to check out the explain output involving a non-correlated one-row
# sub-query. Expect to see a min/max filter at the nested join for an inequality
# predicate between a column and the subquery.
# DECIMAL data type.
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from tpcds_parquet.store_sales
where ss_sales_price < (select min(ss_wholesale_cost) from tpcds_parquet.store_sales);
---- RESULTS: VERIFY_IS_SUBSET
row_regex:.* RF000\[min_max\] <- min\(ss_wholesale_cost\).*
row_regex:.* RF000\[min_max\] -> ss_sales_price.*
====
---- QUERY
# INT data type
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from functional_parquet.alltypes
where id < (select min(id) from functional_parquet.alltypes);
---- RESULTS: VERIFY_IS_SUBSET
row_regex:.* RF000\[min_max\] <- min\(id\).*
row_regex:.* RF000\[min_max\] -> id.*
====
---- QUERY
# Bool data type
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from functional_parquet.alltypes
where bool_col <= (select max(bool_col) from functional_parquet.alltypes);
---- RESULTS: VERIFY_IS_SUBSET
row_regex:.* RF000\[min_max\] <- max\(bool_col\).*
row_regex:.* RF000\[min_max\] -> bool_col.*
====
---- QUERY
# Tiny INT data type
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from functional_parquet.alltypes
where tinyint_col > (select max(tinyint_col) from functional_parquet.alltypes);
---- RESULTS: VERIFY_IS_SUBSET
row_regex:.* RF000\[min_max\] <- max\(tinyint_col\).*
row_regex:.* RF000\[min_max\] -> tinyint_col.*
====
---- QUERY
# FLOAT data type
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from functional_parquet.alltypes
where float_col >= (select max(float_col) from functional_parquet.alltypes);
---- RESULTS: VERIFY_IS_SUBSET
row_regex:.* RF000\[min_max\] <- max\(float_col\).*
row_regex:.* RF000\[min_max\] -> float_col.*
====
---- QUERY
# Timestamp data type
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from functional_parquet.alltypes
where timestamp_col < (select min(timestamp_col) from functional_parquet.alltypes);
---- RESULTS: VERIFY_IS_SUBSET
row_regex:.* RF000\[min_max\] <- min\(timestamp_col\).*
row_regex:.* RF000\[min_max\] -> timestamp_col.*
====
---- QUERY
# Date data type
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from functional_parquet.date_tbl
where date_col < (select min(date_col) from functional_parquet.date_tbl);
---- RESULTS: VERIFY_IS_SUBSET
row_regex:.* RF000\[min_max\] <- min\(date_col\).*
row_regex:.* RF000\[min_max\] -> date_col.*
====
---- QUERY
# String data type
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from functional_parquet.alltypes
where string_col < (select min(string_col) from functional_parquet.alltypes);
---- RESULTS: VERIFY_IS_SUBSET
row_regex:.* RF000\[min_max\] <- min\(string_col\).*
row_regex:.* RF000\[min_max\] -> string_col.*
====
---- QUERY
# An equal predicate that gets translated into a hash join with bloom and min/max
# filters.
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from functional_parquet.alltypes
where string_col = (select min(string_col) from functional_parquet.alltypes);
---- RESULTS: VERIFY_IS_SUBSET
row_regex:.* RF001\[min_max\] <- min\(string_col\).*
row_regex:.* RF001\[min_max\] -> string_col.*
====
---- QUERY
# Two subqueries that get translated into two min/max filters.
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from functional_parquet.alltypes where
id > (select min(id) from functional_parquet.alltypes) and
id < (select max(id) from functional_parquet.alltypes);
---- RESULTS: VERIFY_IS_SUBSET
row_regex:.* RF000\[min_max\] <- max\(id\).*
row_regex:.* RF001\[min_max\] <- min\(id\).*
====
---- QUERY
# Regression test for IMPALA-11047: should compile successfully.
set PARQUET_READ_STATISTICS=false;
select straight_join count(*) from
functional_parquet.alltypes a join [SHUFFLE] functional_parquet.alltypes b
where a.year = b.int_col;
====
---- QUERY
# Negative tests to check out the explain output involving a non-correlated one-row
# sub-query. Expect to observe no min/max filters.
#
# Decimal data type with 16-byte storage (__int128_t) is not supported as
# numeric_limits<__int128_t>::min() and numeric_limits<__int128_t>::max() return 0.
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from functional_parquet.decimal_tbl
where d3 < (select min(d3) from functional_parquet.decimal_tbl);
---- RESULTS: VERIFY_IS_NOT_IN
row_regex:.*min_max.*
====
---- QUERY
# Uncorrelated non-aggregate subquery produces no min/max filters.
set minmax_filtering_level=page;
set minmax_filter_threshold=0.9;
set explain_level=3;
explain select count(*) from tpcds_parquet.store_sales
where ss_sales_price < (select ss_wholesale_cost from tpcds_parquet.store_sales)
---- RESULTS: VERIFY_IS_NOT_IN
row_regex:.*min_max.*
====
